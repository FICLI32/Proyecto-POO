Index: src/main/java/GestorContrasenias.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport java.security.SecureRandom;\n\npublic class GestorContrasenias {\n\n    public static void main(String[] args) throws Exception{\n        Scanner scanner = new Scanner(System.in);\n        SecretKey claveCifrado = generarClaveCifrado();\n        Map<String, String> contrasenias = new HashMap<>();\n        menu(scanner, claveCifrado, contrasenias);\n        scanner.close();\n    }\n\n    public static SecretKey generarClaveCifrado() {\n        try {\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            keyGen.init(128);\n            return keyGen.generateKey();\n        } catch (Exception e) {\n            System.err.println(\"Error al generar clave de cifrado: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static String cifrarContrasenia(SecretKey claveCifrado, String contrasenia) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, claveCifrado);\n            byte[] textoCifrado = cipher.doFinal(contrasenia.getBytes());\n            return Base64.getEncoder().encodeToString(textoCifrado);\n        } catch (Exception e) {\n            System.err.println(\"Error al cifrar contraseña: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static String descifrarContrasenia(SecretKey claveCifrado, String contraseniaCifrada) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, claveCifrado);\n            byte[] textoDescifrado = cipher.doFinal(Base64.getDecoder().decode(contraseniaCifrada));\n            return new String(textoDescifrado);\n        } catch (Exception e) {\n            System.err.println(\"Error al descifrar contraseña: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static void menu(Scanner scanner, SecretKey claveCifrado, Map<String, String> contrasenias) {\n        int opcion;\n        do {\n            mostrarMenu();\n            opcion = leerOpcion(scanner);\n            ejecutarOpcion(opcion, scanner, claveCifrado, contrasenias);\n        } while (opcion != 5);\n    }\n\n    public static void mostrarMenu() {\n        System.out.println(\"╔═════════════════════════════════════╗\");\n        System.out.println(\"║         Bienvenido al Menu de       ║\");\n        System.out.println(\"║         Gestor de Contraseñas       ║\");\n        System.out.println(\"╠═════════════════════════════════════╣\");\n        System.out.println(\"║ 1. Crear una o modificar contraseña ║\");\n        System.out.println(\"║ 2. Eliminar una contraseña          ║\");\n        System.out.println(\"║ 3. Mostrar una contraseña           ║\");\n        System.out.println(\"║ 4. Listar todas las contraseñas     ║\");\n        System.out.println(\"║ 5. Salir                            ║\");\n        System.out.println(\"╚═════════════════════════════════════╝\");\n        System.out.print(\"Seleccione una opción: \");\n    }\n\n    public static int leerOpcion(Scanner scanner) {\n        int opcion = 0;\n        while (true) {\n            if (scanner.hasNextInt()) {\n                opcion = scanner.nextInt();\n                if (opcion >= 1 && opcion <= 5) {\n                    break;\n                } else {\n                    System.out.println(\"Opcion invalida, ingrese nuevamente\");\n                    scanner.next();\n                }\n            } else {\n                System.out.println(\"Entrada no valida, ingrese nuevamente\");\n                scanner.next();\n            }\n        }\n        scanner.nextLine();\n        return opcion;\n    }\n\n    public static void ejecutarOpcion(int opcion, Scanner scanner, SecretKey claveCifrado, Map<String, String> contrasenias) {\n\n        switch (opcion) {\n            case 1:\n                System.out.println(\"Ingrese una etiqueta para la contraseña: \");\n                String crearEtiqueta = scanner.nextLine();\n                System.out.println(\"¿Desea generar una contraseña segura automaticamente? (S/N)\");\n                String generarAutomaticamnete = scanner.nextLine();\n                String crearContrasenia = eleccionGenerarContrasenias(generarAutomaticamnete,scanner);\n                aniadirContrasenia(crearEtiqueta, crearContrasenia, claveCifrado, contrasenias);\n                break;\n\n            case 2:\n                System.out.println(\"Ingrese la etiqueta de la constraseña a eliminar: \");\n                String eliminarEtiqueta = scanner.nextLine();\n                eliminarContrasenia(eliminarEtiqueta, contrasenias);\n                break;\n\n            case 3:\n                System.out.println(\"Ingrese la etiqueta de la contraseña a buscar: \");\n                String mostrarEtiqueta = scanner.nextLine();\n                mostrarContrasenia(mostrarEtiqueta,claveCifrado,contrasenias);\n                break;\n\n            case 4:\n                listarContrasenias(contrasenias);\n                break;\n\n            case 5:\n                System.out.println(\"Saliendo...\");\n                break;\n\n            default:\n                System.err.println(\"Opcion no valida. Intente nuevamente\");\n                break;\n        }\n    }\n\n    public static String generarContrasenia (int longitud) {\n        String caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:',.<>?/\";\n        SecureRandom random = new SecureRandom();\n        StringBuilder contrasenia = new StringBuilder(longitud);\n\n        for (int i = 0; i < longitud; i++) {\n            int indice = random.nextInt(caracteres.length());\n            contrasenia.append(caracteres.charAt(indice));\n        }\n\n        return contrasenia.toString();\n    }\n\n    public static void aniadirContrasenia(String nombreEtiqueta, String crearContrasenia, SecretKey claveCifrado, Map<String, String> contrasenias) {\n        String contraseniaCifrada = cifrarContrasenia(claveCifrado, crearContrasenia);\n        contrasenias.put(nombreEtiqueta, contraseniaCifrada);\n        System.out.println(\"Contraseña creada y cifrada. \");\n    }\n\n    public static void eliminarContrasenia(String etiquetaContrasenia, Map<String, String> contrasenias) {\n        if (contrasenias.containsKey(etiquetaContrasenia)) {\n            contrasenias.remove(etiquetaContrasenia);\n            System.out.println(\"Contraseña eliminada. \");\n        } else {\n            System.out.println(\"Etiqueta no encontrada. \");\n        }\n    }\n\n    public static void mostrarContrasenia(String etiquetaContrasenia, SecretKey claveCifrado, Map<String, String> contrasenias) {\n        if (contrasenias.containsKey(etiquetaContrasenia)) {\n            String contraseniaCifradaMostrar = contrasenias.get(etiquetaContrasenia);\n            String contraseniaDescifrada = descifrarContrasenia(claveCifrado, contraseniaCifradaMostrar);\n            System.out.println(\"Contraseña descifrada: \" + contraseniaDescifrada);\n        } else {\n            System.out.println(\"Etiqueta no encontrada. \");\n        }\n    }\n\n    public static void listarContrasenias(Map<String, String> contrasenias) {\n        if (contrasenias.isEmpty()) {\n            System.out.println(\"No hay contraseñas.\");\n        }else {\n            System.out.println(\"Lista de contraseñas:\");\n            for (Map.Entry<String,String> entry : contrasenias.entrySet()){\n                String etiqueta = entry.getKey();\n                String contrasenia = entry.getValue();\n                System.out.println(\"Etiqueta: \"+etiqueta+\"|\"+\"Contrasenia: \" + contrasenia);\n            }\n        }\n    }\n\n    public static String eleccionGenerarContrasenias (String autoGenerar, Scanner scanner) {\n        String crearContrasenia;\n\n        if (autoGenerar.equalsIgnoreCase(\"S\")) {\n            int longitud;\n            do{\n                System.out.println(\"Ingrese la longitud de la contrasenia (minimo 6 caracteres)\");\n                longitud = scanner.nextInt();\n                scanner.nextLine();\n                if (longitud < 6) {\n                    System.out.println(\"ingrese mas de 6 caracteres de longitud\");\n                }\n            }while (longitud < 6);\n\n            crearContrasenia = generarContrasenia(longitud);\n            System.out.println(\"Contraseña generada: \" + crearContrasenia);\n            return crearContrasenia;\n\n        } else {\n            System.out.println(\"Ingrese la contraseña a crear: \");\n            crearContrasenia = scanner.nextLine();\n            return crearContrasenia;\n        }\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GestorContrasenias.java b/src/main/java/GestorContrasenias.java
--- a/src/main/java/GestorContrasenias.java	(revision 8d5e6b71c1cdda94f1607dc50f6218810280f654)
+++ b/src/main/java/GestorContrasenias.java	(date 1727103669538)
@@ -9,7 +9,7 @@
 
 public class GestorContrasenias {
 
-    public static void main(String[] args) throws Exception{
+    public static void main(String[] args){
         Scanner scanner = new Scanner(System.in);
         SecretKey claveCifrado = generarClaveCifrado();
         Map<String, String> contrasenias = new HashMap<>();
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>GestionDeContrasenas</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>22</maven.compiler.source>\n        <maven.compiler.target>22</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>5.7.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 8d5e6b71c1cdda94f1607dc50f6218810280f654)
+++ b/pom.xml	(date 1727101874033)
@@ -21,6 +21,12 @@
             <version>5.7.2</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>RELEASE</version>
+            <scope>test</scope>
+        </dependency>
     </dependencies>
 
 </project>
\ No newline at end of file
